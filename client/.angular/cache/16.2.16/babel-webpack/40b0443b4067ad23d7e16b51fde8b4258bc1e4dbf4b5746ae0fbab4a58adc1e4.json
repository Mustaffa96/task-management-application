{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@core/services/auth.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/material/snack-bar\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/material/button\";\nimport * as i7 from \"@angular/material/icon\";\nimport * as i8 from \"@angular/material/card\";\nimport * as i9 from \"@angular/material/form-field\";\nimport * as i10 from \"@angular/material/input\";\nimport * as i11 from \"@angular/material/progress-spinner\";\nfunction RegisterComponent_mat_error_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.getErrorMessage(\"name\"), \" \");\n  }\n}\nfunction RegisterComponent_mat_error_24_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.getErrorMessage(\"email\"), \" \");\n  }\n}\nfunction RegisterComponent_mat_error_32_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r2.getErrorMessage(\"password\"), \" \");\n  }\n}\nfunction RegisterComponent_mat_error_40_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r3.getErrorMessage(\"confirmPassword\"), \" \");\n  }\n}\nfunction RegisterComponent_mat_spinner_42_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-spinner\", 17);\n  }\n}\nfunction RegisterComponent_span_43_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"Create Account\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegisterComponent_span_44_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"Creating Account...\");\n    i0.ɵɵelementEnd();\n  }\n}\n/**\n * Register component\n * Provides user registration functionality\n */\nexport class RegisterComponent {\n  /**\n   * Constructor\n   * @param formBuilder Form builder service\n   * @param authService Authentication service\n   * @param router Angular router\n   * @param snackBar Material snackbar\n   */\n  constructor(formBuilder, authService, router, snackBar) {\n    this.formBuilder = formBuilder;\n    this.authService = authService;\n    this.router = router;\n    this.snackBar = snackBar;\n    /**\n     * Loading state\n     */\n    this.isLoading = false;\n    /**\n     * Hide password flag\n     */\n    this.hidePassword = true;\n    /**\n     * Hide confirm password flag\n     */\n    this.hideConfirmPassword = true;\n  }\n  /**\n   * Lifecycle hook that is called after component initialization\n   * Initializes the registration form\n   */\n  ngOnInit() {\n    // Initialize registration form with validation\n    this.registerForm = this.formBuilder.group({\n      name: ['', [Validators.required, Validators.minLength(2)]],\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(6)]],\n      confirmPassword: ['', [Validators.required]]\n    }, {\n      validators: this.passwordMatchValidator\n    });\n    // If user is already authenticated, redirect to tasks\n    if (this.authService.isAuthenticated()) {\n      this.router.navigate(['/tasks']);\n    }\n  }\n  /**\n   * Handle form submission\n   * Attempts to register the user with provided data\n   */\n  onSubmit() {\n    // Check if form is valid\n    if (this.registerForm.invalid) {\n      this.markFormGroupTouched();\n      return;\n    }\n    // Set loading state\n    this.isLoading = true;\n    // Get form values\n    const registerData = {\n      name: this.registerForm.value.name,\n      email: this.registerForm.value.email,\n      password: this.registerForm.value.password\n    };\n    // Attempt registration\n    this.authService.register(registerData).subscribe({\n      next: response => {\n        // Registration successful\n        this.snackBar.open('Registration successful! Welcome to Task Management!', 'Close', {\n          duration: 3000,\n          panelClass: ['success-snackbar']\n        });\n        // Redirect to tasks\n        this.router.navigate(['/tasks']);\n      },\n      error: error => {\n        // Registration failed - error is handled by error interceptor\n        this.isLoading = false;\n      },\n      complete: () => {\n        this.isLoading = false;\n      }\n    });\n  }\n  /**\n   * Custom validator to check if passwords match\n   * @param control Form group control\n   * @returns Validation error or null\n   */\n  passwordMatchValidator(control) {\n    const password = control.get('password');\n    const confirmPassword = control.get('confirmPassword');\n    if (!password || !confirmPassword) {\n      return null;\n    }\n    return password.value === confirmPassword.value ? null : {\n      passwordMismatch: true\n    };\n  }\n  /**\n   * Get form control error message\n   * @param controlName Name of the form control\n   * @returns Error message string\n   */\n  getErrorMessage(controlName) {\n    const control = this.registerForm.get(controlName);\n    if (control?.hasError('required')) {\n      return `${this.getFieldName(controlName)} is required`;\n    }\n    if (control?.hasError('email')) {\n      return 'Please enter a valid email address';\n    }\n    if (control?.hasError('minlength')) {\n      const minLength = control.errors?.['minlength'].requiredLength;\n      return `${this.getFieldName(controlName)} must be at least ${minLength} characters long`;\n    }\n    if (controlName === 'confirmPassword' && this.registerForm.hasError('passwordMismatch')) {\n      return 'Passwords do not match';\n    }\n    return '';\n  }\n  /**\n   * Check if form control has error and is touched\n   * @param controlName Name of the form control\n   * @returns Boolean indicating if control has error\n   */\n  hasError(controlName) {\n    const control = this.registerForm.get(controlName);\n    const hasControlError = !!(control?.invalid && (control?.dirty || control?.touched));\n    // Special case for confirm password - also check form-level password mismatch error\n    if (controlName === 'confirmPassword') {\n      const hasPasswordMismatch = this.registerForm.hasError('passwordMismatch') && (control?.dirty || control?.touched);\n      return hasControlError || hasPasswordMismatch;\n    }\n    return hasControlError;\n  }\n  /**\n   * Get user-friendly field name\n   * @param controlName Name of the form control\n   * @returns User-friendly field name\n   */\n  getFieldName(controlName) {\n    const fieldNames = {\n      name: 'Name',\n      email: 'Email',\n      password: 'Password',\n      confirmPassword: 'Confirm Password'\n    };\n    return fieldNames[controlName] || controlName;\n  }\n  /**\n   * Mark all form controls as touched to show validation errors\n   */\n  markFormGroupTouched() {\n    Object.keys(this.registerForm.controls).forEach(key => {\n      const control = this.registerForm.get(key);\n      control?.markAsTouched();\n    });\n  }\n  static {\n    this.ɵfac = function RegisterComponent_Factory(t) {\n      return new (t || RegisterComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.AuthService), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i4.MatSnackBar));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: RegisterComponent,\n      selectors: [[\"app-register\"]],\n      decls: 50,\n      vars: 17,\n      consts: [[1, \"register-container\"], [1, \"register-card\"], [1, \"register-icon\"], [1, \"register-form\", 3, \"formGroup\", \"ngSubmit\"], [\"appearance\", \"outline\", 1, \"full-width\"], [\"matInput\", \"\", \"type\", \"text\", \"formControlName\", \"name\", \"placeholder\", \"Enter your full name\", \"autocomplete\", \"name\"], [\"matSuffix\", \"\"], [4, \"ngIf\"], [\"matInput\", \"\", \"type\", \"email\", \"formControlName\", \"email\", \"placeholder\", \"Enter your email\", \"autocomplete\", \"email\"], [\"matInput\", \"\", \"formControlName\", \"password\", \"placeholder\", \"Enter your password\", \"autocomplete\", \"new-password\", 3, \"type\"], [\"mat-icon-button\", \"\", \"matSuffix\", \"\", \"type\", \"button\", 3, \"click\"], [\"matInput\", \"\", \"formControlName\", \"confirmPassword\", \"placeholder\", \"Confirm your password\", \"autocomplete\", \"new-password\", 3, \"type\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", \"type\", \"submit\", 1, \"full-width\", \"register-button\", 3, \"disabled\"], [\"diameter\", \"20\", \"class\", \"button-spinner\", 4, \"ngIf\"], [\"align\", \"center\"], [1, \"login-link\"], [\"routerLink\", \"/login\", 1, \"link\"], [\"diameter\", \"20\", 1, \"button-spinner\"]],\n      template: function RegisterComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"mat-card\", 1)(2, \"mat-card-header\")(3, \"mat-card-title\")(4, \"mat-icon\", 2);\n          i0.ɵɵtext(5, \"person_add\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtext(6, \" Create Account \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(7, \"mat-card-subtitle\");\n          i0.ɵɵtext(8, \"Join Task Management to organize your work\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(9, \"mat-card-content\")(10, \"form\", 3);\n          i0.ɵɵlistener(\"ngSubmit\", function RegisterComponent_Template_form_ngSubmit_10_listener() {\n            return ctx.onSubmit();\n          });\n          i0.ɵɵelementStart(11, \"mat-form-field\", 4)(12, \"mat-label\");\n          i0.ɵɵtext(13, \"Full Name\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(14, \"input\", 5);\n          i0.ɵɵelementStart(15, \"mat-icon\", 6);\n          i0.ɵɵtext(16, \"person\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(17, RegisterComponent_mat_error_17_Template, 2, 1, \"mat-error\", 7);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(18, \"mat-form-field\", 4)(19, \"mat-label\");\n          i0.ɵɵtext(20, \"Email\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(21, \"input\", 8);\n          i0.ɵɵelementStart(22, \"mat-icon\", 6);\n          i0.ɵɵtext(23, \"email\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(24, RegisterComponent_mat_error_24_Template, 2, 1, \"mat-error\", 7);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(25, \"mat-form-field\", 4)(26, \"mat-label\");\n          i0.ɵɵtext(27, \"Password\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(28, \"input\", 9);\n          i0.ɵɵelementStart(29, \"button\", 10);\n          i0.ɵɵlistener(\"click\", function RegisterComponent_Template_button_click_29_listener() {\n            return ctx.hidePassword = !ctx.hidePassword;\n          });\n          i0.ɵɵelementStart(30, \"mat-icon\");\n          i0.ɵɵtext(31);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵtemplate(32, RegisterComponent_mat_error_32_Template, 2, 1, \"mat-error\", 7);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(33, \"mat-form-field\", 4)(34, \"mat-label\");\n          i0.ɵɵtext(35, \"Confirm Password\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(36, \"input\", 11);\n          i0.ɵɵelementStart(37, \"button\", 10);\n          i0.ɵɵlistener(\"click\", function RegisterComponent_Template_button_click_37_listener() {\n            return ctx.hideConfirmPassword = !ctx.hideConfirmPassword;\n          });\n          i0.ɵɵelementStart(38, \"mat-icon\");\n          i0.ɵɵtext(39);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵtemplate(40, RegisterComponent_mat_error_40_Template, 2, 1, \"mat-error\", 7);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(41, \"button\", 12);\n          i0.ɵɵtemplate(42, RegisterComponent_mat_spinner_42_Template, 1, 0, \"mat-spinner\", 13);\n          i0.ɵɵtemplate(43, RegisterComponent_span_43_Template, 2, 0, \"span\", 7);\n          i0.ɵɵtemplate(44, RegisterComponent_span_44_Template, 2, 0, \"span\", 7);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(45, \"mat-card-actions\", 14)(46, \"p\", 15);\n          i0.ɵɵtext(47, \" Already have an account? \");\n          i0.ɵɵelementStart(48, \"a\", 16);\n          i0.ɵɵtext(49, \"Login here\");\n          i0.ɵɵelementEnd()()()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(10);\n          i0.ɵɵproperty(\"formGroup\", ctx.registerForm);\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"ngIf\", ctx.hasError(\"name\"));\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"ngIf\", ctx.hasError(\"email\"));\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"type\", ctx.hidePassword ? \"password\" : \"text\");\n          i0.ɵɵadvance(1);\n          i0.ɵɵattribute(\"aria-label\", \"Hide password\")(\"aria-pressed\", ctx.hidePassword);\n          i0.ɵɵadvance(2);\n          i0.ɵɵtextInterpolate(ctx.hidePassword ? \"visibility_off\" : \"visibility\");\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.hasError(\"password\"));\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"type\", ctx.hideConfirmPassword ? \"password\" : \"text\");\n          i0.ɵɵadvance(1);\n          i0.ɵɵattribute(\"aria-label\", \"Hide confirm password\")(\"aria-pressed\", ctx.hideConfirmPassword);\n          i0.ɵɵadvance(2);\n          i0.ɵɵtextInterpolate(ctx.hideConfirmPassword ? \"visibility_off\" : \"visibility\");\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.hasError(\"confirmPassword\"));\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"disabled\", ctx.isLoading);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.isLoading);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", !ctx.isLoading);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.isLoading);\n        }\n      },\n      dependencies: [i5.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i3.RouterLink, i6.MatButton, i6.MatIconButton, i7.MatIcon, i8.MatCard, i8.MatCardActions, i8.MatCardContent, i8.MatCardHeader, i8.MatCardSubtitle, i8.MatCardTitle, i9.MatFormField, i9.MatLabel, i9.MatError, i9.MatSuffix, i10.MatInput, i11.MatProgressSpinner],\n      styles: [\"\\n\\n.register-container[_ngcontent-%COMP%] {\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  min-height: 100vh;\\n  padding: 20px;\\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\\n}\\n\\n\\n\\n.register-card[_ngcontent-%COMP%] {\\n  width: 100%;\\n  max-width: 450px;\\n  padding: 20px;\\n  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);\\n  border-radius: 16px;\\n}\\n\\n\\n\\nmat-card-header[_ngcontent-%COMP%] {\\n  text-align: center;\\n  margin-bottom: 20px;\\n}\\n\\n\\n\\n.register-icon[_ngcontent-%COMP%] {\\n  vertical-align: middle;\\n  margin-right: 8px;\\n  font-size: 24px;\\n}\\n\\n\\n\\n.register-form[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: column;\\n  gap: 16px;\\n}\\n\\n\\n\\n.full-width[_ngcontent-%COMP%] {\\n  width: 100%;\\n}\\n\\n\\n\\n.register-button[_ngcontent-%COMP%] {\\n  height: 48px;\\n  font-size: 16px;\\n  font-weight: 500;\\n  margin-top: 16px;\\n  position: relative;\\n}\\n\\n\\n\\n.button-spinner[_ngcontent-%COMP%] {\\n  margin-right: 8px;\\n}\\n\\n\\n\\n.login-link[_ngcontent-%COMP%] {\\n  text-align: center;\\n  margin: 16px 0 0 0;\\n  color: #666;\\n}\\n\\n\\n\\n.link[_ngcontent-%COMP%] {\\n  color: #3f51b5;\\n  text-decoration: none;\\n  font-weight: 500;\\n}\\n.link[_ngcontent-%COMP%]:hover {\\n  text-decoration: underline;\\n}\\n\\n\\n\\n@media (max-width: 768px) {\\n  .register-container[_ngcontent-%COMP%] {\\n    padding: 16px;\\n  }\\n  .register-card[_ngcontent-%COMP%] {\\n    padding: 16px;\\n  }\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvZmVhdHVyZXMvYXV0aC9yZWdpc3Rlci9yZWdpc3Rlci5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw4QkFBQTtBQUNBO0VBQ0UsYUFBQTtFQUNBLHVCQUFBO0VBQ0EsbUJBQUE7RUFDQSxpQkFBQTtFQUNBLGFBQUE7RUFDQSw2REFBQTtBQUNGOztBQUVBLHlCQUFBO0FBQ0E7RUFDRSxXQUFBO0VBQ0EsZ0JBQUE7RUFDQSxhQUFBO0VBQ0EseUNBQUE7RUFDQSxtQkFBQTtBQUNGOztBQUVBLHVCQUFBO0FBQ0E7RUFDRSxrQkFBQTtFQUNBLG1CQUFBO0FBQ0Y7O0FBRUEsa0JBQUE7QUFDQTtFQUNFLHNCQUFBO0VBQ0EsaUJBQUE7RUFDQSxlQUFBO0FBQ0Y7O0FBRUEsZ0JBQUE7QUFDQTtFQUNFLGFBQUE7RUFDQSxzQkFBQTtFQUNBLFNBQUE7QUFDRjs7QUFFQSw2QkFBQTtBQUNBO0VBQ0UsV0FBQTtBQUNGOztBQUVBLDJCQUFBO0FBQ0E7RUFDRSxZQUFBO0VBQ0EsZUFBQTtFQUNBLGdCQUFBO0VBQ0EsZ0JBQUE7RUFDQSxrQkFBQTtBQUNGOztBQUVBLDBCQUFBO0FBQ0E7RUFDRSxpQkFBQTtBQUNGOztBQUVBLHNCQUFBO0FBQ0E7RUFDRSxrQkFBQTtFQUNBLGtCQUFBO0VBQ0EsV0FBQTtBQUNGOztBQUVBLGdCQUFBO0FBQ0E7RUFDRSxjQUFBO0VBQ0EscUJBQUE7RUFDQSxnQkFBQTtBQUNGO0FBQ0U7RUFDRSwwQkFBQTtBQUNKOztBQUdBLHNDQUFBO0FBQ0E7RUFDRTtJQUNFLGFBQUE7RUFBRjtFQUdBO0lBQ0UsYUFBQTtFQURGO0FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBSZWdpc3RlciBjb250YWluZXIgc3R5bGVzICovXG4ucmVnaXN0ZXItY29udGFpbmVyIHtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIG1pbi1oZWlnaHQ6IDEwMHZoO1xuICBwYWRkaW5nOiAyMHB4O1xuICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoMTM1ZGVnLCAjNjY3ZWVhIDAlLCAjNzY0YmEyIDEwMCUpO1xufVxuXG4vKiBSZWdpc3RlciBjYXJkIHN0eWxlcyAqL1xuLnJlZ2lzdGVyLWNhcmQge1xuICB3aWR0aDogMTAwJTtcbiAgbWF4LXdpZHRoOiA0NTBweDtcbiAgcGFkZGluZzogMjBweDtcbiAgYm94LXNoYWRvdzogMCA4cHggMzJweCByZ2JhKDAsIDAsIDAsIDAuMSk7XG4gIGJvcmRlci1yYWRpdXM6IDE2cHg7XG59XG5cbi8qIENhcmQgaGVhZGVyIHN0eWxlcyAqL1xubWF0LWNhcmQtaGVhZGVyIHtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICBtYXJnaW4tYm90dG9tOiAyMHB4O1xufVxuXG4vKiBSZWdpc3RlciBpY29uICovXG4ucmVnaXN0ZXItaWNvbiB7XG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG4gIG1hcmdpbi1yaWdodDogOHB4O1xuICBmb250LXNpemU6IDI0cHg7XG59XG5cbi8qIEZvcm0gc3R5bGVzICovXG4ucmVnaXN0ZXItZm9ybSB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGdhcDogMTZweDtcbn1cblxuLyogRnVsbCB3aWR0aCB1dGlsaXR5IGNsYXNzICovXG4uZnVsbC13aWR0aCB7XG4gIHdpZHRoOiAxMDAlO1xufVxuXG4vKiBSZWdpc3RlciBidXR0b24gc3R5bGVzICovXG4ucmVnaXN0ZXItYnV0dG9uIHtcbiAgaGVpZ2h0OiA0OHB4O1xuICBmb250LXNpemU6IDE2cHg7XG4gIGZvbnQtd2VpZ2h0OiA1MDA7XG4gIG1hcmdpbi10b3A6IDE2cHg7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbn1cblxuLyogQnV0dG9uIHNwaW5uZXIgc3R5bGVzICovXG4uYnV0dG9uLXNwaW5uZXIge1xuICBtYXJnaW4tcmlnaHQ6IDhweDtcbn1cblxuLyogTG9naW4gbGluayBzdHlsZXMgKi9cbi5sb2dpbi1saW5rIHtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICBtYXJnaW46IDE2cHggMCAwIDA7XG4gIGNvbG9yOiAjNjY2O1xufVxuXG4vKiBMaW5rIHN0eWxlcyAqL1xuLmxpbmsge1xuICBjb2xvcjogIzNmNTFiNTtcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICBmb250LXdlaWdodDogNTAwO1xuICBcbiAgJjpob3ZlciB7XG4gICAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7XG4gIH1cbn1cblxuLyogTWVkaWEgcXVlcnkgZm9yIHJlc3BvbnNpdmUgZGVzaWduICovXG5AbWVkaWEgKG1heC13aWR0aDogNzY4cHgpIHtcbiAgLnJlZ2lzdGVyLWNvbnRhaW5lciB7XG4gICAgcGFkZGluZzogMTZweDtcbiAgfVxuICBcbiAgLnJlZ2lzdGVyLWNhcmQge1xuICAgIHBhZGRpbmc6IDE2cHg7XG4gIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n    });\n  }\n}","map":{"version":3,"names":["Validators","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate1","ctx_r0","getErrorMessage","ctx_r1","ctx_r2","ctx_r3","ɵɵelement","RegisterComponent","constructor","formBuilder","authService","router","snackBar","isLoading","hidePassword","hideConfirmPassword","ngOnInit","registerForm","group","name","required","minLength","email","password","confirmPassword","validators","passwordMatchValidator","isAuthenticated","navigate","onSubmit","invalid","markFormGroupTouched","registerData","value","register","subscribe","next","response","open","duration","panelClass","error","complete","control","get","passwordMismatch","controlName","hasError","getFieldName","errors","requiredLength","hasControlError","dirty","touched","hasPasswordMismatch","fieldNames","Object","keys","controls","forEach","key","markAsTouched","ɵɵdirectiveInject","i1","FormBuilder","i2","AuthService","i3","Router","i4","MatSnackBar","selectors","decls","vars","consts","template","RegisterComponent_Template","rf","ctx","ɵɵlistener","RegisterComponent_Template_form_ngSubmit_10_listener","ɵɵtemplate","RegisterComponent_mat_error_17_Template","RegisterComponent_mat_error_24_Template","RegisterComponent_Template_button_click_29_listener","RegisterComponent_mat_error_32_Template","RegisterComponent_Template_button_click_37_listener","RegisterComponent_mat_error_40_Template","RegisterComponent_mat_spinner_42_Template","RegisterComponent_span_43_Template","RegisterComponent_span_44_Template","ɵɵproperty","ɵɵattribute","ɵɵtextInterpolate"],"sources":["C:\\Users\\Asus\\Documents\\GitHub\\task-management-application\\client\\src\\app\\features\\auth\\register\\register.component.ts","C:\\Users\\Asus\\Documents\\GitHub\\task-management-application\\client\\src\\app\\features\\auth\\register\\register.component.html"],"sourcesContent":["/**\n * Register component\n * Handles user registration\n */\nimport { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, AbstractControl } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\nimport { AuthService } from '@core/services/auth.service';\nimport { RegisterRequest } from '@core/models/auth.model';\n\n/**\n * Register component\n * Provides user registration functionality\n */\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss']\n})\nexport class RegisterComponent implements OnInit {\n  /**\n   * Registration form\n   */\n  registerForm!: FormGroup;\n  \n  /**\n   * Loading state\n   */\n  isLoading = false;\n  \n  /**\n   * Hide password flag\n   */\n  hidePassword = true;\n  \n  /**\n   * Hide confirm password flag\n   */\n  hideConfirmPassword = true;\n  \n  /**\n   * Constructor\n   * @param formBuilder Form builder service\n   * @param authService Authentication service\n   * @param router Angular router\n   * @param snackBar Material snackbar\n   */\n  constructor(\n    private formBuilder: FormBuilder,\n    private authService: AuthService,\n    private router: Router,\n    private snackBar: MatSnackBar\n  ) {}\n  \n  /**\n   * Lifecycle hook that is called after component initialization\n   * Initializes the registration form\n   */\n  ngOnInit(): void {\n    // Initialize registration form with validation\n    this.registerForm = this.formBuilder.group({\n      name: ['', [Validators.required, Validators.minLength(2)]],\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(6)]],\n      confirmPassword: ['', [Validators.required]]\n    }, {\n      validators: this.passwordMatchValidator\n    });\n    \n    // If user is already authenticated, redirect to tasks\n    if (this.authService.isAuthenticated()) {\n      this.router.navigate(['/tasks']);\n    }\n  }\n  \n  /**\n   * Handle form submission\n   * Attempts to register the user with provided data\n   */\n  onSubmit(): void {\n    // Check if form is valid\n    if (this.registerForm.invalid) {\n      this.markFormGroupTouched();\n      return;\n    }\n    \n    // Set loading state\n    this.isLoading = true;\n    \n    // Get form values\n    const registerData: RegisterRequest = {\n      name: this.registerForm.value.name,\n      email: this.registerForm.value.email,\n      password: this.registerForm.value.password\n    };\n    \n    // Attempt registration\n    this.authService.register(registerData).subscribe({\n      next: (response) => {\n        // Registration successful\n        this.snackBar.open('Registration successful! Welcome to Task Management!', 'Close', {\n          duration: 3000,\n          panelClass: ['success-snackbar']\n        });\n        \n        // Redirect to tasks\n        this.router.navigate(['/tasks']);\n      },\n      error: (error) => {\n        // Registration failed - error is handled by error interceptor\n        this.isLoading = false;\n      },\n      complete: () => {\n        this.isLoading = false;\n      }\n    });\n  }\n  \n  /**\n   * Custom validator to check if passwords match\n   * @param control Form group control\n   * @returns Validation error or null\n   */\n  passwordMatchValidator(control: AbstractControl): { [key: string]: boolean } | null {\n    const password = control.get('password');\n    const confirmPassword = control.get('confirmPassword');\n    \n    if (!password || !confirmPassword) {\n      return null;\n    }\n    \n    return password.value === confirmPassword.value ? null : { passwordMismatch: true };\n  }\n  \n  /**\n   * Get form control error message\n   * @param controlName Name of the form control\n   * @returns Error message string\n   */\n  getErrorMessage(controlName: string): string {\n    const control = this.registerForm.get(controlName);\n    \n    if (control?.hasError('required')) {\n      return `${this.getFieldName(controlName)} is required`;\n    }\n    \n    if (control?.hasError('email')) {\n      return 'Please enter a valid email address';\n    }\n    \n    if (control?.hasError('minlength')) {\n      const minLength = control.errors?.['minlength'].requiredLength;\n      return `${this.getFieldName(controlName)} must be at least ${minLength} characters long`;\n    }\n    \n    if (controlName === 'confirmPassword' && this.registerForm.hasError('passwordMismatch')) {\n      return 'Passwords do not match';\n    }\n    \n    return '';\n  }\n  \n  /**\n   * Check if form control has error and is touched\n   * @param controlName Name of the form control\n   * @returns Boolean indicating if control has error\n   */\n  hasError(controlName: string): boolean {\n    const control = this.registerForm.get(controlName);\n    const hasControlError = !!(control?.invalid && (control?.dirty || control?.touched));\n    \n    // Special case for confirm password - also check form-level password mismatch error\n    if (controlName === 'confirmPassword') {\n      const hasPasswordMismatch = this.registerForm.hasError('passwordMismatch') && \n                                  (control?.dirty || control?.touched);\n      return hasControlError || hasPasswordMismatch;\n    }\n    \n    return hasControlError;\n  }\n  \n  /**\n   * Get user-friendly field name\n   * @param controlName Name of the form control\n   * @returns User-friendly field name\n   */\n  private getFieldName(controlName: string): string {\n    const fieldNames: { [key: string]: string } = {\n      name: 'Name',\n      email: 'Email',\n      password: 'Password',\n      confirmPassword: 'Confirm Password'\n    };\n    \n    return fieldNames[controlName] || controlName;\n  }\n  \n  /**\n   * Mark all form controls as touched to show validation errors\n   */\n  private markFormGroupTouched(): void {\n    Object.keys(this.registerForm.controls).forEach(key => {\n      const control = this.registerForm.get(key);\n      control?.markAsTouched();\n    });\n  }\n}\n","<!-- Register form container -->\n<div class=\"register-container\">\n  <mat-card class=\"register-card\">\n    <!-- Card header -->\n    <mat-card-header>\n      <mat-card-title>\n        <mat-icon class=\"register-icon\">person_add</mat-icon>\n        Create Account\n      </mat-card-title>\n      <mat-card-subtitle>Join Task Management to organize your work</mat-card-subtitle>\n    </mat-card-header>\n    \n    <!-- Card content -->\n    <mat-card-content>\n      <!-- Registration form -->\n      <form [formGroup]=\"registerForm\" (ngSubmit)=\"onSubmit()\" class=\"register-form\">\n        <!-- Name field -->\n        <mat-form-field appearance=\"outline\" class=\"full-width\">\n          <mat-label>Full Name</mat-label>\n          <input \n            matInput \n            type=\"text\" \n            formControlName=\"name\" \n            placeholder=\"Enter your full name\"\n            autocomplete=\"name\">\n          <mat-icon matSuffix>person</mat-icon>\n          <mat-error *ngIf=\"hasError('name')\">\n            {{ getErrorMessage('name') }}\n          </mat-error>\n        </mat-form-field>\n        \n        <!-- Email field -->\n        <mat-form-field appearance=\"outline\" class=\"full-width\">\n          <mat-label>Email</mat-label>\n          <input \n            matInput \n            type=\"email\" \n            formControlName=\"email\" \n            placeholder=\"Enter your email\"\n            autocomplete=\"email\">\n          <mat-icon matSuffix>email</mat-icon>\n          <mat-error *ngIf=\"hasError('email')\">\n            {{ getErrorMessage('email') }}\n          </mat-error>\n        </mat-form-field>\n        \n        <!-- Password field -->\n        <mat-form-field appearance=\"outline\" class=\"full-width\">\n          <mat-label>Password</mat-label>\n          <input \n            matInput \n            [type]=\"hidePassword ? 'password' : 'text'\" \n            formControlName=\"password\" \n            placeholder=\"Enter your password\"\n            autocomplete=\"new-password\">\n          <button \n            mat-icon-button \n            matSuffix \n            type=\"button\"\n            (click)=\"hidePassword = !hidePassword\"\n            [attr.aria-label]=\"'Hide password'\"\n            [attr.aria-pressed]=\"hidePassword\">\n            <mat-icon>{{ hidePassword ? 'visibility_off' : 'visibility' }}</mat-icon>\n          </button>\n          <mat-error *ngIf=\"hasError('password')\">\n            {{ getErrorMessage('password') }}\n          </mat-error>\n        </mat-form-field>\n        \n        <!-- Confirm Password field -->\n        <mat-form-field appearance=\"outline\" class=\"full-width\">\n          <mat-label>Confirm Password</mat-label>\n          <input \n            matInput \n            [type]=\"hideConfirmPassword ? 'password' : 'text'\" \n            formControlName=\"confirmPassword\" \n            placeholder=\"Confirm your password\"\n            autocomplete=\"new-password\">\n          <button \n            mat-icon-button \n            matSuffix \n            type=\"button\"\n            (click)=\"hideConfirmPassword = !hideConfirmPassword\"\n            [attr.aria-label]=\"'Hide confirm password'\"\n            [attr.aria-pressed]=\"hideConfirmPassword\">\n            <mat-icon>{{ hideConfirmPassword ? 'visibility_off' : 'visibility' }}</mat-icon>\n          </button>\n          <mat-error *ngIf=\"hasError('confirmPassword')\">\n            {{ getErrorMessage('confirmPassword') }}\n          </mat-error>\n        </mat-form-field>\n        \n        <!-- Submit button -->\n        <button \n          mat-raised-button \n          color=\"primary\" \n          type=\"submit\" \n          class=\"full-width register-button\"\n          [disabled]=\"isLoading\">\n          <mat-spinner \n            *ngIf=\"isLoading\" \n            diameter=\"20\" \n            class=\"button-spinner\">\n          </mat-spinner>\n          <span *ngIf=\"!isLoading\">Create Account</span>\n          <span *ngIf=\"isLoading\">Creating Account...</span>\n        </button>\n      </form>\n    </mat-card-content>\n    \n    <!-- Card actions -->\n    <mat-card-actions align=\"center\">\n      <p class=\"login-link\">\n        Already have an account? \n        <a routerLink=\"/login\" class=\"link\">Login here</a>\n      </p>\n    </mat-card-actions>\n  </mat-card>\n</div>\n"],"mappings":"AAKA,SAAiCA,UAAU,QAAyB,gBAAgB;;;;;;;;;;;;;;;ICqB1EC,EAAA,CAAAC,cAAA,gBAAoC;IAClCD,EAAA,CAAAE,MAAA,GACF;IAAAF,EAAA,CAAAG,YAAA,EAAY;;;;IADVH,EAAA,CAAAI,SAAA,GACF;IADEJ,EAAA,CAAAK,kBAAA,MAAAC,MAAA,CAAAC,eAAA,cACF;;;;;IAaAP,EAAA,CAAAC,cAAA,gBAAqC;IACnCD,EAAA,CAAAE,MAAA,GACF;IAAAF,EAAA,CAAAG,YAAA,EAAY;;;;IADVH,EAAA,CAAAI,SAAA,GACF;IADEJ,EAAA,CAAAK,kBAAA,MAAAG,MAAA,CAAAD,eAAA,eACF;;;;;IAqBAP,EAAA,CAAAC,cAAA,gBAAwC;IACtCD,EAAA,CAAAE,MAAA,GACF;IAAAF,EAAA,CAAAG,YAAA,EAAY;;;;IADVH,EAAA,CAAAI,SAAA,GACF;IADEJ,EAAA,CAAAK,kBAAA,MAAAI,MAAA,CAAAF,eAAA,kBACF;;;;;IAqBAP,EAAA,CAAAC,cAAA,gBAA+C;IAC7CD,EAAA,CAAAE,MAAA,GACF;IAAAF,EAAA,CAAAG,YAAA,EAAY;;;;IADVH,EAAA,CAAAI,SAAA,GACF;IADEJ,EAAA,CAAAK,kBAAA,MAAAK,MAAA,CAAAH,eAAA,yBACF;;;;;IAUAP,EAAA,CAAAW,SAAA,sBAIc;;;;;IACdX,EAAA,CAAAC,cAAA,WAAyB;IAAAD,EAAA,CAAAE,MAAA,qBAAc;IAAAF,EAAA,CAAAG,YAAA,EAAO;;;;;IAC9CH,EAAA,CAAAC,cAAA,WAAwB;IAAAD,EAAA,CAAAE,MAAA,0BAAmB;IAAAF,EAAA,CAAAG,YAAA,EAAO;;;AD7F5D;;;;AASA,OAAM,MAAOS,iBAAiB;EAqB5B;;;;;;;EAOAC,YACUC,WAAwB,EACxBC,WAAwB,EACxBC,MAAc,EACdC,QAAqB;IAHrB,KAAAH,WAAW,GAAXA,WAAW;IACX,KAAAC,WAAW,GAAXA,WAAW;IACX,KAAAC,MAAM,GAANA,MAAM;IACN,KAAAC,QAAQ,GAARA,QAAQ;IA1BlB;;;IAGA,KAAAC,SAAS,GAAG,KAAK;IAEjB;;;IAGA,KAAAC,YAAY,GAAG,IAAI;IAEnB;;;IAGA,KAAAC,mBAAmB,GAAG,IAAI;EAcvB;EAEH;;;;EAIAC,QAAQA,CAAA;IACN;IACA,IAAI,CAACC,YAAY,GAAG,IAAI,CAACR,WAAW,CAACS,KAAK,CAAC;MACzCC,IAAI,EAAE,CAAC,EAAE,EAAE,CAACzB,UAAU,CAAC0B,QAAQ,EAAE1B,UAAU,CAAC2B,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;MAC1DC,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC5B,UAAU,CAAC0B,QAAQ,EAAE1B,UAAU,CAAC4B,KAAK,CAAC,CAAC;MACpDC,QAAQ,EAAE,CAAC,EAAE,EAAE,CAAC7B,UAAU,CAAC0B,QAAQ,EAAE1B,UAAU,CAAC2B,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;MAC9DG,eAAe,EAAE,CAAC,EAAE,EAAE,CAAC9B,UAAU,CAAC0B,QAAQ,CAAC;KAC5C,EAAE;MACDK,UAAU,EAAE,IAAI,CAACC;KAClB,CAAC;IAEF;IACA,IAAI,IAAI,CAAChB,WAAW,CAACiB,eAAe,EAAE,EAAE;MACtC,IAAI,CAAChB,MAAM,CAACiB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;;EAEpC;EAEA;;;;EAIAC,QAAQA,CAAA;IACN;IACA,IAAI,IAAI,CAACZ,YAAY,CAACa,OAAO,EAAE;MAC7B,IAAI,CAACC,oBAAoB,EAAE;MAC3B;;IAGF;IACA,IAAI,CAAClB,SAAS,GAAG,IAAI;IAErB;IACA,MAAMmB,YAAY,GAAoB;MACpCb,IAAI,EAAE,IAAI,CAACF,YAAY,CAACgB,KAAK,CAACd,IAAI;MAClCG,KAAK,EAAE,IAAI,CAACL,YAAY,CAACgB,KAAK,CAACX,KAAK;MACpCC,QAAQ,EAAE,IAAI,CAACN,YAAY,CAACgB,KAAK,CAACV;KACnC;IAED;IACA,IAAI,CAACb,WAAW,CAACwB,QAAQ,CAACF,YAAY,CAAC,CAACG,SAAS,CAAC;MAChDC,IAAI,EAAGC,QAAQ,IAAI;QACjB;QACA,IAAI,CAACzB,QAAQ,CAAC0B,IAAI,CAAC,sDAAsD,EAAE,OAAO,EAAE;UAClFC,QAAQ,EAAE,IAAI;UACdC,UAAU,EAAE,CAAC,kBAAkB;SAChC,CAAC;QAEF;QACA,IAAI,CAAC7B,MAAM,CAACiB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;MAClC,CAAC;MACDa,KAAK,EAAGA,KAAK,IAAI;QACf;QACA,IAAI,CAAC5B,SAAS,GAAG,KAAK;MACxB,CAAC;MACD6B,QAAQ,EAAEA,CAAA,KAAK;QACb,IAAI,CAAC7B,SAAS,GAAG,KAAK;MACxB;KACD,CAAC;EACJ;EAEA;;;;;EAKAa,sBAAsBA,CAACiB,OAAwB;IAC7C,MAAMpB,QAAQ,GAAGoB,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC;IACxC,MAAMpB,eAAe,GAAGmB,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;IAEtD,IAAI,CAACrB,QAAQ,IAAI,CAACC,eAAe,EAAE;MACjC,OAAO,IAAI;;IAGb,OAAOD,QAAQ,CAACU,KAAK,KAAKT,eAAe,CAACS,KAAK,GAAG,IAAI,GAAG;MAAEY,gBAAgB,EAAE;IAAI,CAAE;EACrF;EAEA;;;;;EAKA3C,eAAeA,CAAC4C,WAAmB;IACjC,MAAMH,OAAO,GAAG,IAAI,CAAC1B,YAAY,CAAC2B,GAAG,CAACE,WAAW,CAAC;IAElD,IAAIH,OAAO,EAAEI,QAAQ,CAAC,UAAU,CAAC,EAAE;MACjC,OAAO,GAAG,IAAI,CAACC,YAAY,CAACF,WAAW,CAAC,cAAc;;IAGxD,IAAIH,OAAO,EAAEI,QAAQ,CAAC,OAAO,CAAC,EAAE;MAC9B,OAAO,oCAAoC;;IAG7C,IAAIJ,OAAO,EAAEI,QAAQ,CAAC,WAAW,CAAC,EAAE;MAClC,MAAM1B,SAAS,GAAGsB,OAAO,CAACM,MAAM,GAAG,WAAW,CAAC,CAACC,cAAc;MAC9D,OAAO,GAAG,IAAI,CAACF,YAAY,CAACF,WAAW,CAAC,qBAAqBzB,SAAS,kBAAkB;;IAG1F,IAAIyB,WAAW,KAAK,iBAAiB,IAAI,IAAI,CAAC7B,YAAY,CAAC8B,QAAQ,CAAC,kBAAkB,CAAC,EAAE;MACvF,OAAO,wBAAwB;;IAGjC,OAAO,EAAE;EACX;EAEA;;;;;EAKAA,QAAQA,CAACD,WAAmB;IAC1B,MAAMH,OAAO,GAAG,IAAI,CAAC1B,YAAY,CAAC2B,GAAG,CAACE,WAAW,CAAC;IAClD,MAAMK,eAAe,GAAG,CAAC,EAAER,OAAO,EAAEb,OAAO,KAAKa,OAAO,EAAES,KAAK,IAAIT,OAAO,EAAEU,OAAO,CAAC,CAAC;IAEpF;IACA,IAAIP,WAAW,KAAK,iBAAiB,EAAE;MACrC,MAAMQ,mBAAmB,GAAG,IAAI,CAACrC,YAAY,CAAC8B,QAAQ,CAAC,kBAAkB,CAAC,KAC7CJ,OAAO,EAAES,KAAK,IAAIT,OAAO,EAAEU,OAAO,CAAC;MAChE,OAAOF,eAAe,IAAIG,mBAAmB;;IAG/C,OAAOH,eAAe;EACxB;EAEA;;;;;EAKQH,YAAYA,CAACF,WAAmB;IACtC,MAAMS,UAAU,GAA8B;MAC5CpC,IAAI,EAAE,MAAM;MACZG,KAAK,EAAE,OAAO;MACdC,QAAQ,EAAE,UAAU;MACpBC,eAAe,EAAE;KAClB;IAED,OAAO+B,UAAU,CAACT,WAAW,CAAC,IAAIA,WAAW;EAC/C;EAEA;;;EAGQf,oBAAoBA,CAAA;IAC1ByB,MAAM,CAACC,IAAI,CAAC,IAAI,CAACxC,YAAY,CAACyC,QAAQ,CAAC,CAACC,OAAO,CAACC,GAAG,IAAG;MACpD,MAAMjB,OAAO,GAAG,IAAI,CAAC1B,YAAY,CAAC2B,GAAG,CAACgB,GAAG,CAAC;MAC1CjB,OAAO,EAAEkB,aAAa,EAAE;IAC1B,CAAC,CAAC;EACJ;;;uBA1LWtD,iBAAiB,EAAAZ,EAAA,CAAAmE,iBAAA,CAAAC,EAAA,CAAAC,WAAA,GAAArE,EAAA,CAAAmE,iBAAA,CAAAG,EAAA,CAAAC,WAAA,GAAAvE,EAAA,CAAAmE,iBAAA,CAAAK,EAAA,CAAAC,MAAA,GAAAzE,EAAA,CAAAmE,iBAAA,CAAAO,EAAA,CAAAC,WAAA;IAAA;EAAA;;;YAAjB/D,iBAAiB;MAAAgE,SAAA;MAAAC,KAAA;MAAAC,IAAA;MAAAC,MAAA;MAAAC,QAAA,WAAAC,2BAAAC,EAAA,EAAAC,GAAA;QAAA,IAAAD,EAAA;UCpB9BlF,EAAA,CAAAC,cAAA,aAAgC;UAKQD,EAAA,CAAAE,MAAA,iBAAU;UAAAF,EAAA,CAAAG,YAAA,EAAW;UACrDH,EAAA,CAAAE,MAAA,uBACF;UAAAF,EAAA,CAAAG,YAAA,EAAiB;UACjBH,EAAA,CAAAC,cAAA,wBAAmB;UAAAD,EAAA,CAAAE,MAAA,iDAA0C;UAAAF,EAAA,CAAAG,YAAA,EAAoB;UAInFH,EAAA,CAAAC,cAAA,uBAAkB;UAEiBD,EAAA,CAAAoF,UAAA,sBAAAC,qDAAA;YAAA,OAAYF,GAAA,CAAAjD,QAAA,EAAU;UAAA,EAAC;UAEtDlC,EAAA,CAAAC,cAAA,yBAAwD;UAC3CD,EAAA,CAAAE,MAAA,iBAAS;UAAAF,EAAA,CAAAG,YAAA,EAAY;UAChCH,EAAA,CAAAW,SAAA,gBAKsB;UACtBX,EAAA,CAAAC,cAAA,mBAAoB;UAAAD,EAAA,CAAAE,MAAA,cAAM;UAAAF,EAAA,CAAAG,YAAA,EAAW;UACrCH,EAAA,CAAAsF,UAAA,KAAAC,uCAAA,uBAEY;UACdvF,EAAA,CAAAG,YAAA,EAAiB;UAGjBH,EAAA,CAAAC,cAAA,yBAAwD;UAC3CD,EAAA,CAAAE,MAAA,aAAK;UAAAF,EAAA,CAAAG,YAAA,EAAY;UAC5BH,EAAA,CAAAW,SAAA,gBAKuB;UACvBX,EAAA,CAAAC,cAAA,mBAAoB;UAAAD,EAAA,CAAAE,MAAA,aAAK;UAAAF,EAAA,CAAAG,YAAA,EAAW;UACpCH,EAAA,CAAAsF,UAAA,KAAAE,uCAAA,uBAEY;UACdxF,EAAA,CAAAG,YAAA,EAAiB;UAGjBH,EAAA,CAAAC,cAAA,yBAAwD;UAC3CD,EAAA,CAAAE,MAAA,gBAAQ;UAAAF,EAAA,CAAAG,YAAA,EAAY;UAC/BH,EAAA,CAAAW,SAAA,gBAK8B;UAC9BX,EAAA,CAAAC,cAAA,kBAMqC;UAFnCD,EAAA,CAAAoF,UAAA,mBAAAK,oDAAA;YAAA,OAAAN,GAAA,CAAAhE,YAAA,IAAAgE,GAAA,CAAAhE,YAAA;UAAA,EAAsC;UAGtCnB,EAAA,CAAAC,cAAA,gBAAU;UAAAD,EAAA,CAAAE,MAAA,IAAoD;UAAAF,EAAA,CAAAG,YAAA,EAAW;UAE3EH,EAAA,CAAAsF,UAAA,KAAAI,uCAAA,uBAEY;UACd1F,EAAA,CAAAG,YAAA,EAAiB;UAGjBH,EAAA,CAAAC,cAAA,yBAAwD;UAC3CD,EAAA,CAAAE,MAAA,wBAAgB;UAAAF,EAAA,CAAAG,YAAA,EAAY;UACvCH,EAAA,CAAAW,SAAA,iBAK8B;UAC9BX,EAAA,CAAAC,cAAA,kBAM4C;UAF1CD,EAAA,CAAAoF,UAAA,mBAAAO,oDAAA;YAAA,OAAAR,GAAA,CAAA/D,mBAAA,IAAA+D,GAAA,CAAA/D,mBAAA;UAAA,EAAoD;UAGpDpB,EAAA,CAAAC,cAAA,gBAAU;UAAAD,EAAA,CAAAE,MAAA,IAA2D;UAAAF,EAAA,CAAAG,YAAA,EAAW;UAElFH,EAAA,CAAAsF,UAAA,KAAAM,uCAAA,uBAEY;UACd5F,EAAA,CAAAG,YAAA,EAAiB;UAGjBH,EAAA,CAAAC,cAAA,kBAKyB;UACvBD,EAAA,CAAAsF,UAAA,KAAAO,yCAAA,0BAIc;UACd7F,EAAA,CAAAsF,UAAA,KAAAQ,kCAAA,kBAA8C;UAC9C9F,EAAA,CAAAsF,UAAA,KAAAS,kCAAA,kBAAkD;UACpD/F,EAAA,CAAAG,YAAA,EAAS;UAKbH,EAAA,CAAAC,cAAA,4BAAiC;UAE7BD,EAAA,CAAAE,MAAA,kCACA;UAAAF,EAAA,CAAAC,cAAA,aAAoC;UAAAD,EAAA,CAAAE,MAAA,kBAAU;UAAAF,EAAA,CAAAG,YAAA,EAAI;;;UAnG9CH,EAAA,CAAAI,SAAA,IAA0B;UAA1BJ,EAAA,CAAAgG,UAAA,cAAAb,GAAA,CAAA7D,YAAA,CAA0B;UAWhBtB,EAAA,CAAAI,SAAA,GAAsB;UAAtBJ,EAAA,CAAAgG,UAAA,SAAAb,GAAA,CAAA/B,QAAA,SAAsB;UAetBpD,EAAA,CAAAI,SAAA,GAAuB;UAAvBJ,EAAA,CAAAgG,UAAA,SAAAb,GAAA,CAAA/B,QAAA,UAAuB;UAUjCpD,EAAA,CAAAI,SAAA,GAA2C;UAA3CJ,EAAA,CAAAgG,UAAA,SAAAb,GAAA,CAAAhE,YAAA,uBAA2C;UAS3CnB,EAAA,CAAAI,SAAA,GAAmC;UAAnCJ,EAAA,CAAAiG,WAAA,+BAAmC,iBAAAd,GAAA,CAAAhE,YAAA;UAEzBnB,EAAA,CAAAI,SAAA,GAAoD;UAApDJ,EAAA,CAAAkG,iBAAA,CAAAf,GAAA,CAAAhE,YAAA,mCAAoD;UAEpDnB,EAAA,CAAAI,SAAA,GAA0B;UAA1BJ,EAAA,CAAAgG,UAAA,SAAAb,GAAA,CAAA/B,QAAA,aAA0B;UAUpCpD,EAAA,CAAAI,SAAA,GAAkD;UAAlDJ,EAAA,CAAAgG,UAAA,SAAAb,GAAA,CAAA/D,mBAAA,uBAAkD;UASlDpB,EAAA,CAAAI,SAAA,GAA2C;UAA3CJ,EAAA,CAAAiG,WAAA,uCAA2C,iBAAAd,GAAA,CAAA/D,mBAAA;UAEjCpB,EAAA,CAAAI,SAAA,GAA2D;UAA3DJ,EAAA,CAAAkG,iBAAA,CAAAf,GAAA,CAAA/D,mBAAA,mCAA2D;UAE3DpB,EAAA,CAAAI,SAAA,GAAiC;UAAjCJ,EAAA,CAAAgG,UAAA,SAAAb,GAAA,CAAA/B,QAAA,oBAAiC;UAW7CpD,EAAA,CAAAI,SAAA,GAAsB;UAAtBJ,EAAA,CAAAgG,UAAA,aAAAb,GAAA,CAAAjE,SAAA,CAAsB;UAEnBlB,EAAA,CAAAI,SAAA,GAAe;UAAfJ,EAAA,CAAAgG,UAAA,SAAAb,GAAA,CAAAjE,SAAA,CAAe;UAIXlB,EAAA,CAAAI,SAAA,GAAgB;UAAhBJ,EAAA,CAAAgG,UAAA,UAAAb,GAAA,CAAAjE,SAAA,CAAgB;UAChBlB,EAAA,CAAAI,SAAA,GAAe;UAAfJ,EAAA,CAAAgG,UAAA,SAAAb,GAAA,CAAAjE,SAAA,CAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}