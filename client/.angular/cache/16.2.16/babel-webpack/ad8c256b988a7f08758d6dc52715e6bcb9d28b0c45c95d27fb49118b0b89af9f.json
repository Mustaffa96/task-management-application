{"ast":null,"code":"import { environment } from '@environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\n/**\n * Authentication Interceptor\n * Automatically adds authentication token to API requests\n */\nexport class AuthInterceptor {\n  /**\n   * Constructor\n   * @param authService Authentication service\n   */\n  constructor(authService) {\n    this.authService = authService;\n  }\n  /**\n   * Intercept HTTP requests\n   * @param request The outgoing request\n   * @param next The next handler\n   * @returns An observable of the HTTP event\n   */\n  intercept(request, next) {\n    // Get current user\n    const currentUser = this.authService.getCurrentUser();\n    const isApiUrl = request.url.startsWith(environment.apiUrl);\n    // Only add token for API requests and if user is authenticated with a token\n    // Note: Our backend uses HttpOnly cookies for JWT, but this is here in case\n    // we need to switch to Authorization header approach\n    if (isApiUrl && currentUser && currentUser.token) {\n      request = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${currentUser.token}`\n        }\n      });\n    }\n    // Always include credentials for API requests to allow cookies\n    if (isApiUrl) {\n      request = request.clone({\n        withCredentials: true\n      });\n    }\n    return next.handle(request);\n  }\n  static {\n    this.ɵfac = function AuthInterceptor_Factory(t) {\n      return new (t || AuthInterceptor)(i0.ɵɵinject(i1.AuthService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthInterceptor,\n      factory: AuthInterceptor.ɵfac\n    });\n  }\n}","map":{"version":3,"names":["environment","AuthInterceptor","constructor","authService","intercept","request","next","currentUser","getCurrentUser","isApiUrl","url","startsWith","apiUrl","token","clone","setHeaders","Authorization","withCredentials","handle","i0","ɵɵinject","i1","AuthService","factory","ɵfac"],"sources":["C:\\Users\\Asus\\Documents\\GitHub\\task-management-application\\client\\src\\app\\core\\interceptors\\auth.interceptor.ts"],"sourcesContent":["/**\n * Authentication Interceptor\n * Adds authentication headers to outgoing requests\n */\nimport { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../services/auth.service';\nimport { environment } from '@environments/environment';\n\n/**\n * Authentication Interceptor\n * Automatically adds authentication token to API requests\n */\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n  /**\n   * Constructor\n   * @param authService Authentication service\n   */\n  constructor(private authService: AuthService) {}\n\n  /**\n   * Intercept HTTP requests\n   * @param request The outgoing request\n   * @param next The next handler\n   * @returns An observable of the HTTP event\n   */\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    // Get current user\n    const currentUser = this.authService.getCurrentUser();\n    const isApiUrl = request.url.startsWith(environment.apiUrl);\n    \n    // Only add token for API requests and if user is authenticated with a token\n    // Note: Our backend uses HttpOnly cookies for JWT, but this is here in case\n    // we need to switch to Authorization header approach\n    if (isApiUrl && currentUser && currentUser.token) {\n      request = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${currentUser.token}`\n        }\n      });\n    }\n    \n    // Always include credentials for API requests to allow cookies\n    if (isApiUrl) {\n      request = request.clone({\n        withCredentials: true\n      });\n    }\n    \n    return next.handle(request);\n  }\n}\n"],"mappings":"AAaA,SAASA,WAAW,QAAQ,2BAA2B;;;AAEvD;;;;AAKA,OAAM,MAAOC,eAAe;EAC1B;;;;EAIAC,YAAoBC,WAAwB;IAAxB,KAAAA,WAAW,GAAXA,WAAW;EAAgB;EAE/C;;;;;;EAMAC,SAASA,CAACC,OAA6B,EAAEC,IAAiB;IACxD;IACA,MAAMC,WAAW,GAAG,IAAI,CAACJ,WAAW,CAACK,cAAc,EAAE;IACrD,MAAMC,QAAQ,GAAGJ,OAAO,CAACK,GAAG,CAACC,UAAU,CAACX,WAAW,CAACY,MAAM,CAAC;IAE3D;IACA;IACA;IACA,IAAIH,QAAQ,IAAIF,WAAW,IAAIA,WAAW,CAACM,KAAK,EAAE;MAChDR,OAAO,GAAGA,OAAO,CAACS,KAAK,CAAC;QACtBC,UAAU,EAAE;UACVC,aAAa,EAAE,UAAUT,WAAW,CAACM,KAAK;;OAE7C,CAAC;;IAGJ;IACA,IAAIJ,QAAQ,EAAE;MACZJ,OAAO,GAAGA,OAAO,CAACS,KAAK,CAAC;QACtBG,eAAe,EAAE;OAClB,CAAC;;IAGJ,OAAOX,IAAI,CAACY,MAAM,CAACb,OAAO,CAAC;EAC7B;;;uBArCWJ,eAAe,EAAAkB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA;IAAA;EAAA;;;aAAfrB,eAAe;MAAAsB,OAAA,EAAftB,eAAe,CAAAuB;IAAA;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}