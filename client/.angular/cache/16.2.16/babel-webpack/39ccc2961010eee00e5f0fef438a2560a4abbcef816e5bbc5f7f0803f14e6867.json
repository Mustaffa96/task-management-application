{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/material/snack-bar\";\nimport * as i3 from \"../services/auth.service\";\n/**\n * Error Interceptor\n * Globally handles HTTP errors and provides appropriate responses\n */\nexport class ErrorInterceptor {\n  /**\n   * Constructor\n   * @param router Angular router\n   * @param snackBar Material snackbar for notifications\n   * @param authService Authentication service\n   */\n  constructor(router, snackBar, authService) {\n    this.router = router;\n    this.snackBar = snackBar;\n    this.authService = authService;\n  }\n  /**\n   * Intercept HTTP requests to handle errors\n   * @param request The outgoing request\n   * @param next The next handler\n   * @returns An observable of the HTTP event\n   */\n  intercept(request, next) {\n    return next.handle(request).pipe(catchError(error => {\n      let errorMessage = 'An unknown error occurred';\n      // Extract error message from response\n      if (error.error instanceof ErrorEvent) {\n        // Client-side error\n        errorMessage = `Error: ${error.error.message}`;\n      } else {\n        // Server-side error\n        if (error.error && error.error.message) {\n          errorMessage = error.error.message;\n        } else if (error.statusText) {\n          errorMessage = `${error.status}: ${error.statusText}`;\n        }\n        // Handle specific status codes\n        switch (error.status) {\n          case 401:\n            // Unauthorized\n            // Auto logout if 401 response returned from API\n            this.authService.logout();\n            this.router.navigate(['/login']);\n            errorMessage = 'Session expired. Please log in again.';\n            break;\n          case 403:\n            // Forbidden\n            this.router.navigate(['/tasks']);\n            errorMessage = 'You do not have permission to access this resource.';\n            break;\n          case 404:\n            // Not Found\n            errorMessage = 'Resource not found.';\n            break;\n          case 500:\n            // Server Error\n            errorMessage = 'Server error. Please try again later.';\n            break;\n        }\n      }\n      // Show error message to user\n      this.snackBar.open(errorMessage, 'Close', {\n        duration: 5000,\n        horizontalPosition: 'center',\n        verticalPosition: 'bottom',\n        panelClass: ['error-snackbar']\n      });\n      // Pass the error along\n      return throwError(() => new Error(errorMessage));\n    }));\n  }\n  static {\n    this.ɵfac = function ErrorInterceptor_Factory(t) {\n      return new (t || ErrorInterceptor)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.MatSnackBar), i0.ɵɵinject(i3.AuthService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ErrorInterceptor,\n      factory: ErrorInterceptor.ɵfac\n    });\n  }\n}","map":{"version":3,"names":["throwError","catchError","ErrorInterceptor","constructor","router","snackBar","authService","intercept","request","next","handle","pipe","error","errorMessage","ErrorEvent","message","statusText","status","logout","navigate","open","duration","horizontalPosition","verticalPosition","panelClass","Error","i0","ɵɵinject","i1","Router","i2","MatSnackBar","i3","AuthService","factory","ɵfac"],"sources":["C:\\Users\\Asus\\Documents\\GitHub\\task-management-application\\client\\src\\app\\core\\interceptors\\error.interceptor.ts"],"sourcesContent":["/**\n * Error Interceptor\n * Handles HTTP errors globally\n */\nimport { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n  HttpErrorResponse\n} from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { Router } from '@angular/router';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { AuthService } from '../services/auth.service';\n\n/**\n * Error Interceptor\n * Globally handles HTTP errors and provides appropriate responses\n */\n@Injectable()\nexport class ErrorInterceptor implements HttpInterceptor {\n  /**\n   * Constructor\n   * @param router Angular router\n   * @param snackBar Material snackbar for notifications\n   * @param authService Authentication service\n   */\n  constructor(\n    private router: Router,\n    private snackBar: MatSnackBar,\n    private authService: AuthService\n  ) {}\n\n  /**\n   * Intercept HTTP requests to handle errors\n   * @param request The outgoing request\n   * @param next The next handler\n   * @returns An observable of the HTTP event\n   */\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    return next.handle(request).pipe(\n      catchError((error: HttpErrorResponse) => {\n        let errorMessage = 'An unknown error occurred';\n        \n        // Extract error message from response\n        if (error.error instanceof ErrorEvent) {\n          // Client-side error\n          errorMessage = `Error: ${error.error.message}`;\n        } else {\n          // Server-side error\n          if (error.error && error.error.message) {\n            errorMessage = error.error.message;\n          } else if (error.statusText) {\n            errorMessage = `${error.status}: ${error.statusText}`;\n          }\n          \n          // Handle specific status codes\n          switch (error.status) {\n            case 401: // Unauthorized\n              // Auto logout if 401 response returned from API\n              this.authService.logout();\n              this.router.navigate(['/login']);\n              errorMessage = 'Session expired. Please log in again.';\n              break;\n              \n            case 403: // Forbidden\n              this.router.navigate(['/tasks']);\n              errorMessage = 'You do not have permission to access this resource.';\n              break;\n              \n            case 404: // Not Found\n              errorMessage = 'Resource not found.';\n              break;\n              \n            case 500: // Server Error\n              errorMessage = 'Server error. Please try again later.';\n              break;\n          }\n        }\n        \n        // Show error message to user\n        this.snackBar.open(errorMessage, 'Close', {\n          duration: 5000,\n          horizontalPosition: 'center',\n          verticalPosition: 'bottom',\n          panelClass: ['error-snackbar']\n        });\n        \n        // Pass the error along\n        return throwError(() => new Error(errorMessage));\n      })\n    );\n  }\n}\n"],"mappings":"AAYA,SAAqBA,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,QAAQ,gBAAgB;;;;;AAK3C;;;;AAKA,OAAM,MAAOC,gBAAgB;EAC3B;;;;;;EAMAC,YACUC,MAAc,EACdC,QAAqB,EACrBC,WAAwB;IAFxB,KAAAF,MAAM,GAANA,MAAM;IACN,KAAAC,QAAQ,GAARA,QAAQ;IACR,KAAAC,WAAW,GAAXA,WAAW;EAClB;EAEH;;;;;;EAMAC,SAASA,CAACC,OAA6B,EAAEC,IAAiB;IACxD,OAAOA,IAAI,CAACC,MAAM,CAACF,OAAO,CAAC,CAACG,IAAI,CAC9BV,UAAU,CAAEW,KAAwB,IAAI;MACtC,IAAIC,YAAY,GAAG,2BAA2B;MAE9C;MACA,IAAID,KAAK,CAACA,KAAK,YAAYE,UAAU,EAAE;QACrC;QACAD,YAAY,GAAG,UAAUD,KAAK,CAACA,KAAK,CAACG,OAAO,EAAE;OAC/C,MAAM;QACL;QACA,IAAIH,KAAK,CAACA,KAAK,IAAIA,KAAK,CAACA,KAAK,CAACG,OAAO,EAAE;UACtCF,YAAY,GAAGD,KAAK,CAACA,KAAK,CAACG,OAAO;SACnC,MAAM,IAAIH,KAAK,CAACI,UAAU,EAAE;UAC3BH,YAAY,GAAG,GAAGD,KAAK,CAACK,MAAM,KAAKL,KAAK,CAACI,UAAU,EAAE;;QAGvD;QACA,QAAQJ,KAAK,CAACK,MAAM;UAClB,KAAK,GAAG;YAAE;YACR;YACA,IAAI,CAACX,WAAW,CAACY,MAAM,EAAE;YACzB,IAAI,CAACd,MAAM,CAACe,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;YAChCN,YAAY,GAAG,uCAAuC;YACtD;UAEF,KAAK,GAAG;YAAE;YACR,IAAI,CAACT,MAAM,CAACe,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;YAChCN,YAAY,GAAG,qDAAqD;YACpE;UAEF,KAAK,GAAG;YAAE;YACRA,YAAY,GAAG,qBAAqB;YACpC;UAEF,KAAK,GAAG;YAAE;YACRA,YAAY,GAAG,uCAAuC;YACtD;;;MAIN;MACA,IAAI,CAACR,QAAQ,CAACe,IAAI,CAACP,YAAY,EAAE,OAAO,EAAE;QACxCQ,QAAQ,EAAE,IAAI;QACdC,kBAAkB,EAAE,QAAQ;QAC5BC,gBAAgB,EAAE,QAAQ;QAC1BC,UAAU,EAAE,CAAC,gBAAgB;OAC9B,CAAC;MAEF;MACA,OAAOxB,UAAU,CAAC,MAAM,IAAIyB,KAAK,CAACZ,YAAY,CAAC,CAAC;IAClD,CAAC,CAAC,CACH;EACH;;;uBAxEWX,gBAAgB,EAAAwB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,MAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,WAAA,GAAAL,EAAA,CAAAC,QAAA,CAAAK,EAAA,CAAAC,WAAA;IAAA;EAAA;;;aAAhB/B,gBAAgB;MAAAgC,OAAA,EAAhBhC,gBAAgB,CAAAiC;IAAA;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}