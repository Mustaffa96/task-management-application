{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"@angular/router\";\n/**\n * Authentication Guard\n * Prevents unauthorized access to protected routes\n */\nexport class AuthGuard {\n  /**\n   * Constructor\n   * @param authService Authentication service\n   * @param router Angular router\n   */\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  /**\n   * Determines if a route can be activated\n   * @param route Route being activated\n   * @param state Router state\n   * @returns Boolean indicating if route can be activated or a redirect URL\n   */\n  canActivate(route, state) {\n    // Check if user is authenticated\n    if (this.authService.isAuthenticated()) {\n      // Check if route requires specific role\n      const requiredRole = route.data['requiredRole'];\n      if (requiredRole && !this.authService.hasRole(requiredRole)) {\n        // User doesn't have required role, redirect to dashboard\n        return this.router.createUrlTree(['/tasks']);\n      }\n      // User is authenticated and has required role (if any)\n      return true;\n    }\n    // User is not authenticated, redirect to login\n    // Store the attempted URL for redirecting after login\n    return this.router.createUrlTree(['/login'], {\n      queryParams: {\n        returnUrl: state.url\n      }\n    });\n  }\n  static {\n    this.ɵfac = function AuthGuard_Factory(t) {\n      return new (t || AuthGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthGuard,\n      factory: AuthGuard.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["AuthGuard","constructor","authService","router","canActivate","route","state","isAuthenticated","requiredRole","data","hasRole","createUrlTree","queryParams","returnUrl","url","i0","ɵɵinject","i1","AuthService","i2","Router","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Asus\\Documents\\GitHub\\task-management-application\\client\\src\\app\\core\\guards\\auth.guard.ts"],"sourcesContent":["/**\n * Authentication Guard\n * Protects routes that require authentication\n */\nimport { Injectable } from '@angular/core';\nimport { \n  CanActivate, \n  ActivatedRouteSnapshot, \n  RouterStateSnapshot, \n  Router, \n  UrlTree \n} from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../services/auth.service';\n\n/**\n * Authentication Guard\n * Prevents unauthorized access to protected routes\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n  /**\n   * Constructor\n   * @param authService Authentication service\n   * @param router Angular router\n   */\n  constructor(\n    private authService: AuthService,\n    private router: Router\n  ) {}\n  \n  /**\n   * Determines if a route can be activated\n   * @param route Route being activated\n   * @param state Router state\n   * @returns Boolean indicating if route can be activated or a redirect URL\n   */\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    // Check if user is authenticated\n    if (this.authService.isAuthenticated()) {\n      // Check if route requires specific role\n      const requiredRole = route.data['requiredRole'] as string;\n      \n      if (requiredRole && !this.authService.hasRole(requiredRole)) {\n        // User doesn't have required role, redirect to dashboard\n        return this.router.createUrlTree(['/tasks']);\n      }\n      \n      // User is authenticated and has required role (if any)\n      return true;\n    }\n    \n    // User is not authenticated, redirect to login\n    // Store the attempted URL for redirecting after login\n    return this.router.createUrlTree(['/login'], {\n      queryParams: { returnUrl: state.url }\n    });\n  }\n}\n"],"mappings":";;;AAeA;;;;AAOA,OAAM,MAAOA,SAAS;EACpB;;;;;EAKAC,YACUC,WAAwB,EACxBC,MAAc;IADd,KAAAD,WAAW,GAAXA,WAAW;IACX,KAAAC,MAAM,GAANA,MAAM;EACb;EAEH;;;;;;EAMAC,WAAWA,CACTC,KAA6B,EAC7BC,KAA0B;IAE1B;IACA,IAAI,IAAI,CAACJ,WAAW,CAACK,eAAe,EAAE,EAAE;MACtC;MACA,MAAMC,YAAY,GAAGH,KAAK,CAACI,IAAI,CAAC,cAAc,CAAW;MAEzD,IAAID,YAAY,IAAI,CAAC,IAAI,CAACN,WAAW,CAACQ,OAAO,CAACF,YAAY,CAAC,EAAE;QAC3D;QACA,OAAO,IAAI,CAACL,MAAM,CAACQ,aAAa,CAAC,CAAC,QAAQ,CAAC,CAAC;;MAG9C;MACA,OAAO,IAAI;;IAGb;IACA;IACA,OAAO,IAAI,CAACR,MAAM,CAACQ,aAAa,CAAC,CAAC,QAAQ,CAAC,EAAE;MAC3CC,WAAW,EAAE;QAAEC,SAAS,EAAEP,KAAK,CAACQ;MAAG;KACpC,CAAC;EACJ;;;uBAxCWd,SAAS,EAAAe,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;IAAA;EAAA;;;aAATpB,SAAS;MAAAqB,OAAA,EAATrB,SAAS,CAAAsB,IAAA;MAAAC,UAAA,EAFR;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}