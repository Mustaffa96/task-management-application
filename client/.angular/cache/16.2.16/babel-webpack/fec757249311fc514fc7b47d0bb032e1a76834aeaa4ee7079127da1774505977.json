{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@core/services/auth.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/material/snack-bar\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/material/button\";\nimport * as i7 from \"@angular/material/icon\";\nimport * as i8 from \"@angular/material/card\";\nimport * as i9 from \"@angular/material/form-field\";\nimport * as i10 from \"@angular/material/input\";\nimport * as i11 from \"@angular/material/progress-spinner\";\nfunction LoginComponent_mat_error_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.getErrorMessage(\"email\"), \" \");\n  }\n}\nfunction LoginComponent_mat_error_25_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.getErrorMessage(\"password\"), \" \");\n  }\n}\nfunction LoginComponent_mat_spinner_27_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-spinner\", 15);\n  }\n}\nfunction LoginComponent_span_28_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"Login\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_span_29_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"Logging in...\");\n    i0.ɵɵelementEnd();\n  }\n}\n/**\n * Login component\n * Provides user login functionality\n */\nexport class LoginComponent {\n  /**\n   * Constructor\n   * @param formBuilder Form builder service\n   * @param authService Authentication service\n   * @param router Angular router\n   * @param route Activated route\n   * @param snackBar Material snackbar\n   */\n  constructor(formBuilder, authService, router, route, snackBar) {\n    this.formBuilder = formBuilder;\n    this.authService = authService;\n    this.router = router;\n    this.route = route;\n    this.snackBar = snackBar;\n    /**\n     * Loading state\n     */\n    this.isLoading = false;\n    /**\n     * Hide password flag\n     */\n    this.hidePassword = true;\n    /**\n     * Return URL for redirect after login\n     */\n    this.returnUrl = '/tasks';\n  }\n  /**\n   * Lifecycle hook that is called after component initialization\n   * Initializes the login form and gets return URL\n   */\n  ngOnInit() {\n    // Initialize login form with validation\n    this.loginForm = this.formBuilder.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(6)]]\n    });\n    // Get return URL from route parameters or default to '/tasks'\n    this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/tasks';\n    // If user is already authenticated, redirect to return URL\n    if (this.authService.isAuthenticated()) {\n      this.router.navigate([this.returnUrl]);\n    }\n  }\n  /**\n   * Handle form submission\n   * Attempts to log in the user with provided credentials\n   */\n  onSubmit() {\n    // Check if form is valid\n    if (this.loginForm.invalid) {\n      this.markFormGroupTouched();\n      return;\n    }\n    // Set loading state\n    this.isLoading = true;\n    // Get form values\n    const loginData = {\n      email: this.loginForm.value.email,\n      password: this.loginForm.value.password\n    };\n    // Attempt login\n    this.authService.login(loginData).subscribe({\n      next: response => {\n        // Login successful\n        this.snackBar.open('Login successful!', 'Close', {\n          duration: 3000,\n          panelClass: ['success-snackbar']\n        });\n        // Redirect to return URL\n        this.router.navigate([this.returnUrl]);\n      },\n      error: error => {\n        // Login failed - error is handled by error interceptor\n        this.isLoading = false;\n      },\n      complete: () => {\n        this.isLoading = false;\n      }\n    });\n  }\n  /**\n   * Get form control error message\n   * @param controlName Name of the form control\n   * @returns Error message string\n   */\n  getErrorMessage(controlName) {\n    const control = this.loginForm.get(controlName);\n    if (control?.hasError('required')) {\n      return `${this.getFieldName(controlName)} is required`;\n    }\n    if (control?.hasError('email')) {\n      return 'Please enter a valid email address';\n    }\n    if (control?.hasError('minlength')) {\n      const minLength = control.errors?.['minlength'].requiredLength;\n      return `Password must be at least ${minLength} characters long`;\n    }\n    return '';\n  }\n  /**\n   * Check if form control has error and is touched\n   * @param controlName Name of the form control\n   * @returns Boolean indicating if control has error\n   */\n  hasError(controlName) {\n    const control = this.loginForm.get(controlName);\n    return !!(control?.invalid && (control?.dirty || control?.touched));\n  }\n  /**\n   * Get user-friendly field name\n   * @param controlName Name of the form control\n   * @returns User-friendly field name\n   */\n  getFieldName(controlName) {\n    const fieldNames = {\n      email: 'Email',\n      password: 'Password'\n    };\n    return fieldNames[controlName] || controlName;\n  }\n  /**\n   * Mark all form controls as touched to show validation errors\n   */\n  markFormGroupTouched() {\n    Object.keys(this.loginForm.controls).forEach(key => {\n      const control = this.loginForm.get(key);\n      control?.markAsTouched();\n    });\n  }\n  static {\n    this.ɵfac = function LoginComponent_Factory(t) {\n      return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.AuthService), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i3.ActivatedRoute), i0.ɵɵdirectiveInject(i4.MatSnackBar));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: LoginComponent,\n      selectors: [[\"app-login\"]],\n      decls: 35,\n      vars: 11,\n      consts: [[1, \"login-container\"], [1, \"login-card\"], [1, \"login-icon\"], [1, \"login-form\", 3, \"formGroup\", \"ngSubmit\"], [\"appearance\", \"outline\", 1, \"full-width\"], [\"matInput\", \"\", \"type\", \"email\", \"formControlName\", \"email\", \"placeholder\", \"Enter your email\", \"autocomplete\", \"email\"], [\"matSuffix\", \"\"], [4, \"ngIf\"], [\"matInput\", \"\", \"formControlName\", \"password\", \"placeholder\", \"Enter your password\", \"autocomplete\", \"current-password\", 3, \"type\"], [\"mat-icon-button\", \"\", \"matSuffix\", \"\", \"type\", \"button\", 3, \"click\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", \"type\", \"submit\", 1, \"full-width\", \"login-button\", 3, \"disabled\"], [\"diameter\", \"20\", \"class\", \"button-spinner\", 4, \"ngIf\"], [\"align\", \"center\"], [1, \"register-link\"], [\"routerLink\", \"/register\", 1, \"link\"], [\"diameter\", \"20\", 1, \"button-spinner\"]],\n      template: function LoginComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"mat-card\", 1)(2, \"mat-card-header\")(3, \"mat-card-title\")(4, \"mat-icon\", 2);\n          i0.ɵɵtext(5, \"login\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtext(6, \" Login to Task Management \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(7, \"mat-card-subtitle\");\n          i0.ɵɵtext(8, \"Enter your credentials to access your tasks\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(9, \"mat-card-content\")(10, \"form\", 3);\n          i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_10_listener() {\n            return ctx.onSubmit();\n          });\n          i0.ɵɵelementStart(11, \"mat-form-field\", 4)(12, \"mat-label\");\n          i0.ɵɵtext(13, \"Email\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(14, \"input\", 5);\n          i0.ɵɵelementStart(15, \"mat-icon\", 6);\n          i0.ɵɵtext(16, \"email\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(17, LoginComponent_mat_error_17_Template, 2, 1, \"mat-error\", 7);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(18, \"mat-form-field\", 4)(19, \"mat-label\");\n          i0.ɵɵtext(20, \"Password\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(21, \"input\", 8);\n          i0.ɵɵelementStart(22, \"button\", 9);\n          i0.ɵɵlistener(\"click\", function LoginComponent_Template_button_click_22_listener() {\n            return ctx.hidePassword = !ctx.hidePassword;\n          });\n          i0.ɵɵelementStart(23, \"mat-icon\");\n          i0.ɵɵtext(24);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵtemplate(25, LoginComponent_mat_error_25_Template, 2, 1, \"mat-error\", 7);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(26, \"button\", 10);\n          i0.ɵɵtemplate(27, LoginComponent_mat_spinner_27_Template, 1, 0, \"mat-spinner\", 11);\n          i0.ɵɵtemplate(28, LoginComponent_span_28_Template, 2, 0, \"span\", 7);\n          i0.ɵɵtemplate(29, LoginComponent_span_29_Template, 2, 0, \"span\", 7);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(30, \"mat-card-actions\", 12)(31, \"p\", 13);\n          i0.ɵɵtext(32, \" Don't have an account? \");\n          i0.ɵɵelementStart(33, \"a\", 14);\n          i0.ɵɵtext(34, \"Register here\");\n          i0.ɵɵelementEnd()()()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(10);\n          i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"ngIf\", ctx.hasError(\"email\"));\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"type\", ctx.hidePassword ? \"password\" : \"text\");\n          i0.ɵɵadvance(1);\n          i0.ɵɵattribute(\"aria-label\", \"Hide password\")(\"aria-pressed\", ctx.hidePassword);\n          i0.ɵɵadvance(2);\n          i0.ɵɵtextInterpolate(ctx.hidePassword ? \"visibility_off\" : \"visibility\");\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.hasError(\"password\"));\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"disabled\", ctx.isLoading);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.isLoading);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", !ctx.isLoading);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.isLoading);\n        }\n      },\n      dependencies: [i5.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i3.RouterLink, i6.MatButton, i6.MatIconButton, i7.MatIcon, i8.MatCard, i8.MatCardActions, i8.MatCardContent, i8.MatCardHeader, i8.MatCardSubtitle, i8.MatCardTitle, i9.MatFormField, i9.MatLabel, i9.MatError, i9.MatSuffix, i10.MatInput, i11.MatProgressSpinner],\n      styles: [\"\\n\\n.login-container[_ngcontent-%COMP%] {\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  min-height: 100vh;\\n  padding: 20px;\\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\\n}\\n\\n\\n\\n.login-card[_ngcontent-%COMP%] {\\n  width: 100%;\\n  max-width: 400px;\\n  padding: 20px;\\n  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);\\n  border-radius: 16px;\\n}\\n\\n\\n\\nmat-card-header[_ngcontent-%COMP%] {\\n  text-align: center;\\n  margin-bottom: 20px;\\n}\\n\\n\\n\\n.login-icon[_ngcontent-%COMP%] {\\n  vertical-align: middle;\\n  margin-right: 8px;\\n  font-size: 24px;\\n}\\n\\n\\n\\n.login-form[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: column;\\n  gap: 16px;\\n}\\n\\n\\n\\n.full-width[_ngcontent-%COMP%] {\\n  width: 100%;\\n}\\n\\n\\n\\n.login-button[_ngcontent-%COMP%] {\\n  height: 48px;\\n  font-size: 16px;\\n  font-weight: 500;\\n  margin-top: 16px;\\n  position: relative;\\n}\\n\\n\\n\\n.button-spinner[_ngcontent-%COMP%] {\\n  margin-right: 8px;\\n}\\n\\n\\n\\n.register-link[_ngcontent-%COMP%] {\\n  text-align: center;\\n  margin: 16px 0 0 0;\\n  color: #666;\\n}\\n\\n\\n\\n.link[_ngcontent-%COMP%] {\\n  color: #3f51b5;\\n  text-decoration: none;\\n  font-weight: 500;\\n}\\n.link[_ngcontent-%COMP%]:hover {\\n  text-decoration: underline;\\n}\\n\\n\\n\\n@media (max-width: 768px) {\\n  .login-container[_ngcontent-%COMP%] {\\n    padding: 16px;\\n  }\\n  .login-card[_ngcontent-%COMP%] {\\n    padding: 16px;\\n  }\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvZmVhdHVyZXMvYXV0aC9sb2dpbi9sb2dpbi5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSwyQkFBQTtBQUNBO0VBQ0UsYUFBQTtFQUNBLHVCQUFBO0VBQ0EsbUJBQUE7RUFDQSxpQkFBQTtFQUNBLGFBQUE7RUFDQSw2REFBQTtBQUNGOztBQUVBLHNCQUFBO0FBQ0E7RUFDRSxXQUFBO0VBQ0EsZ0JBQUE7RUFDQSxhQUFBO0VBQ0EseUNBQUE7RUFDQSxtQkFBQTtBQUNGOztBQUVBLHVCQUFBO0FBQ0E7RUFDRSxrQkFBQTtFQUNBLG1CQUFBO0FBQ0Y7O0FBRUEsZUFBQTtBQUNBO0VBQ0Usc0JBQUE7RUFDQSxpQkFBQTtFQUNBLGVBQUE7QUFDRjs7QUFFQSxnQkFBQTtBQUNBO0VBQ0UsYUFBQTtFQUNBLHNCQUFBO0VBQ0EsU0FBQTtBQUNGOztBQUVBLDZCQUFBO0FBQ0E7RUFDRSxXQUFBO0FBQ0Y7O0FBRUEsd0JBQUE7QUFDQTtFQUNFLFlBQUE7RUFDQSxlQUFBO0VBQ0EsZ0JBQUE7RUFDQSxnQkFBQTtFQUNBLGtCQUFBO0FBQ0Y7O0FBRUEsMEJBQUE7QUFDQTtFQUNFLGlCQUFBO0FBQ0Y7O0FBRUEseUJBQUE7QUFDQTtFQUNFLGtCQUFBO0VBQ0Esa0JBQUE7RUFDQSxXQUFBO0FBQ0Y7O0FBRUEsZ0JBQUE7QUFDQTtFQUNFLGNBQUE7RUFDQSxxQkFBQTtFQUNBLGdCQUFBO0FBQ0Y7QUFDRTtFQUNFLDBCQUFBO0FBQ0o7O0FBR0Esc0NBQUE7QUFDQTtFQUNFO0lBQ0UsYUFBQTtFQUFGO0VBR0E7SUFDRSxhQUFBO0VBREY7QUFDRiIsInNvdXJjZXNDb250ZW50IjpbIi8qIExvZ2luIGNvbnRhaW5lciBzdHlsZXMgKi9cbi5sb2dpbi1jb250YWluZXIge1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgbWluLWhlaWdodDogMTAwdmg7XG4gIHBhZGRpbmc6IDIwcHg7XG4gIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCgxMzVkZWcsICM2NjdlZWEgMCUsICM3NjRiYTIgMTAwJSk7XG59XG5cbi8qIExvZ2luIGNhcmQgc3R5bGVzICovXG4ubG9naW4tY2FyZCB7XG4gIHdpZHRoOiAxMDAlO1xuICBtYXgtd2lkdGg6IDQwMHB4O1xuICBwYWRkaW5nOiAyMHB4O1xuICBib3gtc2hhZG93OiAwIDhweCAzMnB4IHJnYmEoMCwgMCwgMCwgMC4xKTtcbiAgYm9yZGVyLXJhZGl1czogMTZweDtcbn1cblxuLyogQ2FyZCBoZWFkZXIgc3R5bGVzICovXG5tYXQtY2FyZC1oZWFkZXIge1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIG1hcmdpbi1ib3R0b206IDIwcHg7XG59XG5cbi8qIExvZ2luIGljb24gKi9cbi5sb2dpbi1pY29uIHtcbiAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcbiAgbWFyZ2luLXJpZ2h0OiA4cHg7XG4gIGZvbnQtc2l6ZTogMjRweDtcbn1cblxuLyogRm9ybSBzdHlsZXMgKi9cbi5sb2dpbi1mb3JtIHtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgZ2FwOiAxNnB4O1xufVxuXG4vKiBGdWxsIHdpZHRoIHV0aWxpdHkgY2xhc3MgKi9cbi5mdWxsLXdpZHRoIHtcbiAgd2lkdGg6IDEwMCU7XG59XG5cbi8qIExvZ2luIGJ1dHRvbiBzdHlsZXMgKi9cbi5sb2dpbi1idXR0b24ge1xuICBoZWlnaHQ6IDQ4cHg7XG4gIGZvbnQtc2l6ZTogMTZweDtcbiAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgbWFyZ2luLXRvcDogMTZweDtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xufVxuXG4vKiBCdXR0b24gc3Bpbm5lciBzdHlsZXMgKi9cbi5idXR0b24tc3Bpbm5lciB7XG4gIG1hcmdpbi1yaWdodDogOHB4O1xufVxuXG4vKiBSZWdpc3RlciBsaW5rIHN0eWxlcyAqL1xuLnJlZ2lzdGVyLWxpbmsge1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIG1hcmdpbjogMTZweCAwIDAgMDtcbiAgY29sb3I6ICM2NjY7XG59XG5cbi8qIExpbmsgc3R5bGVzICovXG4ubGluayB7XG4gIGNvbG9yOiAjM2Y1MWI1O1xuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gIGZvbnQtd2VpZ2h0OiA1MDA7XG4gIFxuICAmOmhvdmVyIHtcbiAgICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTtcbiAgfVxufVxuXG4vKiBNZWRpYSBxdWVyeSBmb3IgcmVzcG9uc2l2ZSBkZXNpZ24gKi9cbkBtZWRpYSAobWF4LXdpZHRoOiA3NjhweCkge1xuICAubG9naW4tY29udGFpbmVyIHtcbiAgICBwYWRkaW5nOiAxNnB4O1xuICB9XG4gIFxuICAubG9naW4tY2FyZCB7XG4gICAgcGFkZGluZzogMTZweDtcbiAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"names":["Validators","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate1","ctx_r0","getErrorMessage","ctx_r1","ɵɵelement","LoginComponent","constructor","formBuilder","authService","router","route","snackBar","isLoading","hidePassword","returnUrl","ngOnInit","loginForm","group","email","required","password","minLength","snapshot","queryParams","isAuthenticated","navigate","onSubmit","invalid","markFormGroupTouched","loginData","value","login","subscribe","next","response","open","duration","panelClass","error","complete","controlName","control","get","hasError","getFieldName","errors","requiredLength","dirty","touched","fieldNames","Object","keys","controls","forEach","key","markAsTouched","ɵɵdirectiveInject","i1","FormBuilder","i2","AuthService","i3","Router","ActivatedRoute","i4","MatSnackBar","selectors","decls","vars","consts","template","LoginComponent_Template","rf","ctx","ɵɵlistener","LoginComponent_Template_form_ngSubmit_10_listener","ɵɵtemplate","LoginComponent_mat_error_17_Template","LoginComponent_Template_button_click_22_listener","LoginComponent_mat_error_25_Template","LoginComponent_mat_spinner_27_Template","LoginComponent_span_28_Template","LoginComponent_span_29_Template","ɵɵproperty","ɵɵattribute","ɵɵtextInterpolate"],"sources":["C:\\Users\\Asus\\Documents\\GitHub\\task-management-application\\client\\src\\app\\features\\auth\\login\\login.component.ts","C:\\Users\\Asus\\Documents\\GitHub\\task-management-application\\client\\src\\app\\features\\auth\\login\\login.component.html"],"sourcesContent":["/**\n * Login component\n * Handles user authentication\n */\nimport { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\nimport { AuthService } from '@core/services/auth.service';\nimport { LoginRequest } from '@core/models/auth.model';\n\n/**\n * Login component\n * Provides user login functionality\n */\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n  /**\n   * Login form\n   */\n  loginForm!: FormGroup;\n  \n  /**\n   * Loading state\n   */\n  isLoading = false;\n  \n  /**\n   * Hide password flag\n   */\n  hidePassword = true;\n  \n  /**\n   * Return URL for redirect after login\n   */\n  private returnUrl = '/tasks';\n  \n  /**\n   * Constructor\n   * @param formBuilder Form builder service\n   * @param authService Authentication service\n   * @param router Angular router\n   * @param route Activated route\n   * @param snackBar Material snackbar\n   */\n  constructor(\n    private formBuilder: FormBuilder,\n    private authService: AuthService,\n    private router: Router,\n    private route: ActivatedRoute,\n    private snackBar: MatSnackBar\n  ) {}\n  \n  /**\n   * Lifecycle hook that is called after component initialization\n   * Initializes the login form and gets return URL\n   */\n  ngOnInit(): void {\n    // Initialize login form with validation\n    this.loginForm = this.formBuilder.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(6)]]\n    });\n    \n    // Get return URL from route parameters or default to '/tasks'\n    this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/tasks';\n    \n    // If user is already authenticated, redirect to return URL\n    if (this.authService.isAuthenticated()) {\n      this.router.navigate([this.returnUrl]);\n    }\n  }\n  \n  /**\n   * Handle form submission\n   * Attempts to log in the user with provided credentials\n   */\n  onSubmit(): void {\n    // Check if form is valid\n    if (this.loginForm.invalid) {\n      this.markFormGroupTouched();\n      return;\n    }\n    \n    // Set loading state\n    this.isLoading = true;\n    \n    // Get form values\n    const loginData: LoginRequest = {\n      email: this.loginForm.value.email,\n      password: this.loginForm.value.password\n    };\n    \n    // Attempt login\n    this.authService.login(loginData).subscribe({\n      next: (response) => {\n        // Login successful\n        this.snackBar.open('Login successful!', 'Close', {\n          duration: 3000,\n          panelClass: ['success-snackbar']\n        });\n        \n        // Redirect to return URL\n        this.router.navigate([this.returnUrl]);\n      },\n      error: (error) => {\n        // Login failed - error is handled by error interceptor\n        this.isLoading = false;\n      },\n      complete: () => {\n        this.isLoading = false;\n      }\n    });\n  }\n  \n  /**\n   * Get form control error message\n   * @param controlName Name of the form control\n   * @returns Error message string\n   */\n  getErrorMessage(controlName: string): string {\n    const control = this.loginForm.get(controlName);\n    \n    if (control?.hasError('required')) {\n      return `${this.getFieldName(controlName)} is required`;\n    }\n    \n    if (control?.hasError('email')) {\n      return 'Please enter a valid email address';\n    }\n    \n    if (control?.hasError('minlength')) {\n      const minLength = control.errors?.['minlength'].requiredLength;\n      return `Password must be at least ${minLength} characters long`;\n    }\n    \n    return '';\n  }\n  \n  /**\n   * Check if form control has error and is touched\n   * @param controlName Name of the form control\n   * @returns Boolean indicating if control has error\n   */\n  hasError(controlName: string): boolean {\n    const control = this.loginForm.get(controlName);\n    return !!(control?.invalid && (control?.dirty || control?.touched));\n  }\n  \n  /**\n   * Get user-friendly field name\n   * @param controlName Name of the form control\n   * @returns User-friendly field name\n   */\n  private getFieldName(controlName: string): string {\n    const fieldNames: { [key: string]: string } = {\n      email: 'Email',\n      password: 'Password'\n    };\n    \n    return fieldNames[controlName] || controlName;\n  }\n  \n  /**\n   * Mark all form controls as touched to show validation errors\n   */\n  private markFormGroupTouched(): void {\n    Object.keys(this.loginForm.controls).forEach(key => {\n      const control = this.loginForm.get(key);\n      control?.markAsTouched();\n    });\n  }\n}\n","<!-- Login form container -->\n<div class=\"login-container\">\n  <mat-card class=\"login-card\">\n    <!-- Card header -->\n    <mat-card-header>\n      <mat-card-title>\n        <mat-icon class=\"login-icon\">login</mat-icon>\n        Login to Task Management\n      </mat-card-title>\n      <mat-card-subtitle>Enter your credentials to access your tasks</mat-card-subtitle>\n    </mat-card-header>\n    \n    <!-- Card content -->\n    <mat-card-content>\n      <!-- Login form -->\n      <form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\" class=\"login-form\">\n        <!-- Email field -->\n        <mat-form-field appearance=\"outline\" class=\"full-width\">\n          <mat-label>Email</mat-label>\n          <input \n            matInput \n            type=\"email\" \n            formControlName=\"email\" \n            placeholder=\"Enter your email\"\n            autocomplete=\"email\">\n          <mat-icon matSuffix>email</mat-icon>\n          <mat-error *ngIf=\"hasError('email')\">\n            {{ getErrorMessage('email') }}\n          </mat-error>\n        </mat-form-field>\n        \n        <!-- Password field -->\n        <mat-form-field appearance=\"outline\" class=\"full-width\">\n          <mat-label>Password</mat-label>\n          <input \n            matInput \n            [type]=\"hidePassword ? 'password' : 'text'\" \n            formControlName=\"password\" \n            placeholder=\"Enter your password\"\n            autocomplete=\"current-password\">\n          <button \n            mat-icon-button \n            matSuffix \n            type=\"button\"\n            (click)=\"hidePassword = !hidePassword\"\n            [attr.aria-label]=\"'Hide password'\"\n            [attr.aria-pressed]=\"hidePassword\">\n            <mat-icon>{{ hidePassword ? 'visibility_off' : 'visibility' }}</mat-icon>\n          </button>\n          <mat-error *ngIf=\"hasError('password')\">\n            {{ getErrorMessage('password') }}\n          </mat-error>\n        </mat-form-field>\n        \n        <!-- Submit button -->\n        <button \n          mat-raised-button \n          color=\"primary\" \n          type=\"submit\" \n          class=\"full-width login-button\"\n          [disabled]=\"isLoading\">\n          <mat-spinner \n            *ngIf=\"isLoading\" \n            diameter=\"20\" \n            class=\"button-spinner\">\n          </mat-spinner>\n          <span *ngIf=\"!isLoading\">Login</span>\n          <span *ngIf=\"isLoading\">Logging in...</span>\n        </button>\n      </form>\n    </mat-card-content>\n    \n    <!-- Card actions -->\n    <mat-card-actions align=\"center\">\n      <p class=\"register-link\">\n        Don't have an account? \n        <a routerLink=\"/register\" class=\"link\">Register here</a>\n      </p>\n    </mat-card-actions>\n  </mat-card>\n</div>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}