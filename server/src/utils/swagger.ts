/**
 * Swagger documentation auto-generation utility
 * This script generates Swagger documentation for the API endpoints
 */

import swaggerAutogen from 'swagger-autogen';
import path from 'path';
import dotenv from 'dotenv';

// Load environment variables
dotenv.config();

// Port configuration from environment or default to 8000
const PORT = process.env.PORT || 8000;

// Output file for the generated Swagger documentation
const outputFile = path.resolve(__dirname, '../config/swagger-output.json');

// Input files containing the API routes
const endpointsFiles = [
  path.resolve(__dirname, '../routes/auth.routes.ts'),
  path.resolve(__dirname, '../routes/user.routes.ts'),
  path.resolve(__dirname, '../routes/task.routes.ts'),
];

// Swagger document definition
const doc = {
  info: {
    title: 'Task Management API',
    description: 'API documentation for the Task Management Application',
    version: '1.0.0',
    contact: {
      name: 'API Support',
      email: 'support@taskmanagement.com',
    },
    license: {
      name: 'MIT',
      url: 'https://opensource.org/licenses/MIT',
    },
  },
  host: `localhost:${PORT}`,
  basePath: '/api',
  schemes: ['http', 'https'],
  securityDefinitions: {
    bearerAuth: {
      type: 'apiKey',
      name: 'Authorization',
      in: 'header',
      description: 'Enter your bearer token in the format "Bearer {token}". Token must be obtained from the /api/auth/login endpoint. The token payload must contain id, email, and role fields. Sample tokens will not work - you must use a token generated by the login endpoint.',
    },
  },
  // Ensure proper CORS handling
  options: {
    explorer: true,
    swaggerOptions: {
      withCredentials: true,
      persistAuthorization: true,
    },
  },
  responses: {
    UnauthorizedError: {
      description: 'Authentication information is missing or invalid',
      content: {
        'application/json': {
          schema: {
            type: 'object',
            properties: {
              error: {
                type: 'string',
                example: 'Invalid or expired token'
              }
            }
          }
        }
      }
    },
    ServerError: {
      description: 'Internal server error',
      content: {
        'application/json': {
          schema: {
            type: 'object',
            properties: {
              error: {
                type: 'string',
                example: 'An unexpected error occurred'
              }
            }
          }
        }
      }
    },
  },
  definitions: {
    User: {
      id: 'string',
      name: 'string',
      email: 'string',
      role: { $ref: '#/definitions/UserRole' },
      createdAt: 'string',
      updatedAt: 'string',
    },
    UserRole: {
      enum: ['ADMIN', 'USER'],
      type: 'string',
    },
    Task: {
      id: 'string',
      title: 'string',
      description: 'string',
      status: { $ref: '#/definitions/TaskStatus' },
      priority: { $ref: '#/definitions/TaskPriority' },
      dueDate: 'string',
      assigneeId: 'string',
      createdBy: 'string',
      createdAt: 'string',
      updatedAt: 'string',
    },
    TaskStatus: {
      enum: ['TODO', 'IN_PROGRESS', 'REVIEW', 'DONE'],
      type: 'string',
    },
    TaskPriority: {
      enum: ['LOW', 'MEDIUM', 'HIGH'],
      type: 'string',
    },
    Error: {
      message: 'string',
      status: 'number',
    },
  },
};

// Generate Swagger documentation
swaggerAutogen()(outputFile, endpointsFiles, doc)
  .then(() => {
    console.log('✅ Swagger documentation generated successfully!');
    console.log(`📄 Documentation available at: http://localhost:${PORT}/api-docs`);
  })
  .catch((err) => {
    console.error('❌ Error generating Swagger documentation:', err);
  });
